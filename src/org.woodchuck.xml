<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <!-- Object: /org/woodchuck -->
  <interface name="org.woodchuck">
    <!-- Register a new manager.

         Also see the manager_register method in
         org.woodchuck.manager.

         Manipulate the manager object using the org.woodchuck.manager
         interface and the object /org/woodchuck/UUID.  -->
    <method name="ManagerRegister">
      <!-- Dictionary of initial values for the various
           properties. See the org.woodchuck.manager interface.

           The following properties are required:
            - HumanReadableName

           Note: a{ss} is also supported, but then only properties
           with a string type may be expressed.
      -->
      <arg name="properties" type="a{sv}"/>

      <!-- Only succeed if the supplied cookie is unique.  -->
      <arg name="only_if_cookie_unique" type="b"/>

      <!-- The manager's unique identifier (a 16-character
           alpha-numeric string).  -->
      <arg name="UUID" type="s" direction="out"/>
    </method>

    <!-- Return a list of the known managers.  -->
    <method name="ListManagers">
      <!-- Whether to list all descendents (true) or just top-level
           manager (false).  Argument is optional and defaults to
           true.  -->
      <arg name="Recursive" type="b"/>

      <!-- An array of <UUID, COOKIE, HUMAN_READABLE_NAME, PARENT
           UUID>.  -->
      <arg name="Managers" type="a(ssss)" direction="out"/>
    </method>

    <!-- Return a list of managers with the cookie COOKIE.  If
         RECURSIVE is TRUE, consider any manager.  If RECURSIVE is
         FALSE, only consider top-level managers.  -->
    <method name="LookupManagerByCookie">
      <arg name="Cookie" type="s"/>
      <arg name="Recursive" type="b"/>

      <!-- An array of <UUID, HUMAN_READABLE_NAME, PARENT UUID>.  -->
      <arg name="Managers" type="a(sss)" direction="out"/>
    </method>

    <!-- Evaluate the desirability of executing a download right now.  -->
    <method name="DownloadDesirability">
      <!-- The type of request.
	     1 - user initiated
	     2 - background
	-->
      <arg name="RequestType" type="u"/>

      <!-- Array of <EXPECTED_SIZE, UTILITY> tuples.  See
           org.woodchuck.object.Versions for a description.  -->
      <arg name="Versions" type="a(tu)"/>

      <!-- The desirability of executing the job now.
	   0 - Avoid if at all possible.
	   5 - Now is acceptable but waiting is better.
	   9 - Now is ideal.
	-->
      <arg name="Desirability" type="u" direction="out"/>
      <!-- Which version to download as an index into the passed
           Versions array.  -1 means do not download anything.  -->
      <arg name="Version" type="u" direction="out"/>
    </method>
  </interface>
</node>
