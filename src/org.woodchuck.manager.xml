<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <!-- Object: /org/woodchuck/manager/`ManagerUUID` -->
  <interface name="org.woodchuck.manager">
    <!-- Unregister this manager and any descendent objects.  This
         does not remove any files; only the metadata stored on the
         Woodchuck server is deleted.  -->
    <method name="Unregister">
      <!-- If true, fail if this manager has any descendents.  -->
      <arg name="OnlyIfNoDescendents" type="b"/>
    </method>

    <!-- Register a new manager, which is subordinate to this one.

         This enables the creation of a manager hierarchy, which is
         useful for separating a program's components.  For instance,
         a web browser might have a page cache and a set of files that
         should be downloaded later.  Each should be registered as a
         child manager to the top-level web browser manager.  -->
    <method name="ManagerRegister">
      <!-- Dictionary of initial values for the various
           properties.

           The following properties are required: `HumanReadableName`.

           Note: The a{ss} type is also supported, but then only
           properties with a string type may be expressed.  (This is a
           concession to dbus-send, as it does not support parameters
           with the variant type.)
      -->
      <arg name="Properties" type="a{sv}"/>

      <!-- Only succeed if the supplied cookie is unique among all
           sibling managers.  -->
      <arg name="OnlyIfCookieUnique" type="b"/>

      <!-- The new manager's unique identifier (a 16-character
           alpha-numeric string).  -->
      <arg name="UUID" type="s" direction="out"/>
    </method>

    <!-- Return a list of child managers.  -->
    <method name="ListManagers">
      <!-- Whether to list all descendents (true) or just immediate
           children (false).  -->
      <arg name="Recursive" type="b"/>

      <!-- An array of <`UUID`, `Cookie`, `HumanReadableName`,
           `ParentUUID`>.  -->
      <arg name="Managers" type="a(ssss)" direction="out"/>
    </method>

    <!-- Return the managers whose `Cookie` property matches the
         specified cookie.  -->
    <method name="LookupManagerByCookie">
      <!-- The cookie to match.  -->
      <arg name="Cookie" type="s"/>
      <!-- If true, consider any descendent manager.  If false, only
           consider immediate children.  -->
      <arg name="Recursive" type="b"/>

      <!-- An array of <`UUID`, `HumanReadableName`, `ParentUUID`>.  -->
      <arg name="Managers" type="a(sss)" direction="out"/>
    </method>

    <!-- Register a new stream.  -->
    <method name="StreamRegister">
      <!-- Dictionary of initial values for the various
           properties. See the :class:`org.woodchuck.stream`
           interface for the list of properties and their meanings.

           The following properties are required: `HumanReadableName`

           Note: The a{ss} type is also supported, but then only
           properties with a string type may be expressed.  (This is a
           concession to dbus-send, as it does not support parameters
           with the variant type.)  -->
      <arg name="Properties" type="a{sv}"/>

      <!-- Only succeed if the supplied cookie is unique among all
           streams belonging to this manager.  -->
      <arg name="OnlyIfCookieUnique" type="b"/>

      <!-- The new stream's unique identifier.  -->
      <arg name="UUID" type="s" direction="out"/>
    </method>

    <!-- Return a list of streams.  -->
    <method name="ListStreams">
      <!-- An array of <`UUID`, `Cookie`, `HumanReadableName`>.  -->
      <arg name="Streams" type="a(sss)" direction="out"/>
    </method>

    <!-- Return a list of streams with the specified cookie.  -->
    <method name="LookupStreamByCookie">
      <!-- The cookie to match.  -->
      <arg name="Cookie" type="s"/>

      <!-- An array of <`UUID`, `HumanReadableName`>.  -->
      <arg name="Streams" type="a(ss)" direction="out"/>
    </method>

    <!-- Indicate that the calling process would like to receive
         upcalls pertaining to this manager and (optionally) any of
         its descendents.

         .. Note: Upcalls are sent to all subscriptions.  Thus, if a
             single process has multiple subscriptions, it will receive
             the same upcall multiple times.

         Feedback is sent until :func:`FeedbackUnsubscribe` is called.

         .. Note: If the calling process's private DBus name becomes
             invalid, the subscription is automatically cancelled.
         -->
    <method name="FeedbackSubscribe">
      <!-- If true, also make upcalls for any descendents.  -->
      <arg name="DescendentsToo" type="b"/>

      <!-- An opaque handle, that must be passed to
           :func:`FeedbackUnSubscribe`.  -->
      <arg name="Handle" type="s" direction="out"/>
    </method>

    <!-- Request that Woodchuck cancel the indicated subscription.
         -->
    <method name="FeedbackUnsubscribe">
      <!-- The handle returned by :func:`FeedbackSubscribe`.  -->
      <arg name="Handle" type="s"/>
    </method>

    <!-- Ack the feedback with the provided UUID.  -->
    <method name="FeedbackAck">
      <arg name="ObjectUUID" type="s"/>
      <arg name="ObjectInstance" type="u"/>
    </method>

    <!-- This manager's parent manager.  -->
    <property name="ParentUUID" type="s" access="read"/>

    <!-- A human readable name for the manager.  When displaying a
         manager's human readable name, the human readable name of
         each of its ancestors as well as its own will be concatenated
         together.  Thus, if the manager's parent is called "Firefox"
         and it has a child web cache, the human readable name of the
         child should be "Web Cache," not "Firefox Web Cache."  The
         latter would result in "Firefox Firefox Web Cache" being
         displayed to the user.  -->
    <property name="HumanReadableName" type="s" access="readwrite"/>

    <!-- A free-form string uninterpreted by the server and passed to
         any manager upcalls.

         By convention, this is set to the application's DBus name
         thereby allowing all application's to easily lookup the UUID
         of their manager and avoiding any namespace collisions.

         .. Note: Woodchuck does not enforce that the `Cookie`
             property be unique.  -->
    <property name="Cookie" type="s" access="readwrite"/>

    <!-- The DBus service name of the service to start when there is
         work to do, e.g., streams to update or objects to transfer.
         See :class:`org.woodchuck.upcall`.  -->
    <property name="DBusServiceName" type="s" access="readwrite"/>

    <!-- The DBus object to send upcalls to.  This defaults to
         '/org/woodchuck'.  -->
    <property name="DBusObject" type="s" access="readwrite"/>

    <!-- The priority, relative to other managers with the same parent
         manager.  -->
    <property name="Priority" type="u" access="readwrite"/>

    <!-- The time at which the object was registered.  -->
    <property name="RegistrationTime" type="t" access="read"/>
  </interface>
</node>
