<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <!-- Object: /org/woodchuck/stream/`StreamUUID`. -->
  <interface name="org.woodchuck.stream">
    <!-- Unregister this stream and any descendent objects.  This does
         not remove any files, only metadata stored on the Woodchuck
         server is deleted.  -->
    <method name="Unregister">
      <!-- If true, fail if this stream has any registered objects.
           -->
      <arg name="OnlyIfEmpty" type="b"/>
    </method>

    <!-- Register a new object.  -->
    <method name="ObjectRegister">
      <!-- Dictionary of initial values for the various
           properties. See the :class:`org.woodchuck.object` interface
           for the list of properties and their meanings.

           No properties are required.

           Note: The a{ss} type is also supported, but then only
           properties with a string type may be expressed.  (This is a
           concession to dbus-send, as it does not support parameters
           with the variant type.)  -->
      <arg name="Properties" type="a{sv}"/>

      <!-- Only succeed if the supplied cookie is unique among all
           objects in this stream.  -->
      <arg name="OnlyIfCookieUnique" type="b"/>

      <!-- The new object's unique identifier.  -->
      <arg name="UUID" type="s" direction="out"/>
    </method>

    <!-- Return a list of objects in this stream.  -->
    <method name="ListObjects">
      <!-- An array of <`UUID`, `Cookie`, `HumanReadableName`,
           `ParentUUID`>.  -->
      <arg name="Objects" type="a(sss)" direction="out"/>
    </method>

    <!-- Return the objects whose `Cookie` property matches the
         specified cookie.  -->
    <method name="LookupObjectByCookie">
      <!-- The cookie to match.  -->
      <arg name="Cookie" type="s"/>

      <!-- An array of <`UUID`, `HumanReadableName`>.  -->
      <arg name="Objects" type="a(ss)" direction="out"/>
    </method>

    <!-- Indicate that a stream has been updated.

         This is typically called in reaction to a
         :func:`org.woodchuck.upcall.StreamUpdate` upcall, but should
         whenever a stream is updated.
         -->
    <method name="UpdateStatus">
      <!-- 0: Success.

           Transient errors (will try again later):

           * 0x100: Other.
           * 0x101: Unable to contact server.
           * 0x102: Transfer incomplete.

           Hard errors (give up trying to update this stream):

	   * 0x200: Other.
           * 0x201: File gone.
      -->
      <arg name="Status" type="u"/>

      <!-- The type of indicator displayed to the user, if any.  A
           bitmask of:

             * 0x1: Audio sound
	     * 0x2: Application visual notification
	     * 0x4: Desktop visual notification, small, e.g., blinking icon
	     * 0x8: Desktop visual notification, large, e.g., system tray
	       notification
	     * 0x10: External visible notification, e.g., an LED
	     * 0x20: Vibrate

             * 0x40: Object-specific notification
             * 0x80: Stream-wide notification, i.e., an aggregate
	       notification for all updates in the stream.

             * 0x100: Manager-wide notification, i.e., an aggregate
	       notification for all updates in the manager.

             * 0x80000000: It is unknown if an indicator was shown.

           0 means that no notification was shown.
       -->
      <arg name="Indicator" type="u"/>

      <!-- The approximate number of bytes uploaded.  If unknown, pass
           -1.  -->
      <arg name="TransferredUp" type="t"/>
      <!-- The approximate number of bytes downloaded.  If unknown,
           pass -1.  -->
      <arg name="TransferredDown" type="t"/>

      <!-- The time at which the update was started (in seconds
           since the epoch).  Pass 0 if unknown. -->
      <arg name="TransferTime" type="t"/>
      <!-- The time, in seconds, it took to perform the transfer.
           Pass 0 if unknown.  -->
      <arg name="TransferDuration" type="u"/>

      <!-- The number of new objects discovered.  If not known, pass
           -1.  -->
      <arg name="NewObjects" type="u"/>
      <!-- The objects discovered to have changes.  If not known, pass
           -1.  -->
      <arg name="UpdatedObjects" type="u"/>
      <!-- The number of inline updates.  If not known, pass -1.  -->
      <arg name="ObjectsInline" type="u"/>
    </method>


    <!-- The manager this streams belongs to.  -->
    <property name="ParentUUID" type="s" access="read"/>

    <!-- A human readable name for the stream.  When displaying a
         stream's human readable name, it will always be displayed
         with the human readable name of the manager.  -->
    <property name="HumanReadableName" type="s" access="readwrite"/>

    <!-- A free-form string uninterpreted by the server and passed to
         any stream upcalls.

         The application can set this to a database key or URL to
         avoid having to manage a mapping between Woodchuck UUIDs and
         local identifiers.  -->
    <property name="Cookie" type="s" access="readwrite"/>

    <!-- The priority, relative to other streams managed by the same
         manager.  -->
    <property name="Priority" type="u" access="readwrite"/>

    <!-- How often the stream should be updated, in seconds.

         A value of UINT32_MAX is interpretted as meaning that the
         stream is never updated, in which case, there is no need to
         check for stream updates.  -->
    <property name="Freshness" type="u" access="readwrite"/>

    <!-- Whether objects are predominantly inline (i.e., delivered
         with stream updates) or not.  Default: False.

         Consider an RSS feed for a blog: this often includes the
         article text.  This is unlike a Podcast feed, which often
         just includes links to the objects' contents.  -->
    <property name="ObjectsMostlyInline" type="b" access="readwrite"/>

    <!-- The time at which the stream was registered.  -->
    <property name="RegistrationTime" type="t" access="read"/>
  </interface>
</node>
